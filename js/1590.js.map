{"version":3,"file":"1590.js","mappings":"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","sources":["webpack://sakurairo-scripts/./node_modules/.pnpm/pixel-stream@1.0.3/node_modules/pixel-stream/index.js","webpack://sakurairo-scripts/./node_modules/.pnpm/promise-worker@2.0.1/node_modules/promise-worker/register.js","webpack://sakurairo-scripts/./node_modules/.pnpm/shallow-copy@0.0.1/node_modules/shallow-copy/index.js","webpack://sakurairo-scripts/webpack/bootstrap","webpack://sakurairo-scripts/webpack/runtime/compat get default export","webpack://sakurairo-scripts/webpack/runtime/define property getters","webpack://sakurairo-scripts/webpack/runtime/hasOwnProperty shorthand","webpack://sakurairo-scripts/./node_modules/.pnpm/neuquant-js@git+https+++git@github.com+KotoriK+neuquant-js.git\u0000#623a740dde09df93e23ff76f0e97ec_47ehpvkryyk2ycwzqnfknkmf4i/node_modules/neuquant-js/src/neuquant.js","webpack://sakurairo-scripts/./node_modules/.pnpm/neuquant-js@git+https+++git@github.com+KotoriK+neuquant-js.git\u0000#623a740dde09df93e23ff76f0e97ec_47ehpvkryyk2ycwzqnfknkmf4i/node_modules/neuquant-js/src/helpers.js","webpack://sakurairo-scripts/./node_modules/.pnpm/color-space@2.0.1/node_modules/color-space/xyz.js","webpack://sakurairo-scripts/./node_modules/.pnpm/@kotorik+palette@2.1.0/node_modules/@kotorik/palette/dist/index.modern.js","webpack://sakurairo-scripts/./node_modules/.pnpm/color-space@2.0.1/node_modules/color-space/lab.js","webpack://sakurairo-scripts/./src/app/theme-color/worker.ts"],"sourcesContent":["var Transform = require('stream').Transform;\nvar PassThrough = require('stream').PassThrough;\nvar util = require('util');\nvar copy = require('shallow-copy');\n\n// color space component counts\nvar COMPONENTS = {\n  'rgb': 3,\n  'rgba': 4,\n  'cmyk': 4,\n  'gray': 1,\n  'graya': 2,\n  'indexed': 1\n};\n\n// pixel stream states\nvar START = 0;\nvar FRAME_START = 1;\nvar FRAME_DATA = 2;\nvar FRAME_END = 3;\n\nvar EMPTY_BUFFER = new Buffer(0);\n\nfunction PixelStream(width, height, opts) {\n  Transform.call(this);\n  \n  if (typeof width === 'object') {\n    opts = width;\n    width = height = 0;\n  }\n  \n  this.format = {\n    width: width || 0,\n    height: height || 0,\n    colorSpace: 'rgb'\n  };\n  \n  if (typeof opts === 'object') {\n    for (var key in opts)\n      this.format[key] = opts[key];\n  }\n    \n  this._consumed = 0;\n  this._state = START;\n  this._frameQueue = [];\n  \n  var self = this;\n  this.once('pipe', function(src) {\n    src.on('format', function(format) {      \n      // extend the frame object\n      for (var key in format)\n        self.format[key] = format[key]\n    });\n    \n    src.on('frame', this.addFrame.bind(this));\n  });\n}\n\nutil.inherits(PixelStream, Transform);\n\n/**\n * Adds a frame metadata object to the frame queue.\n * This object can represent any information about\n * the frame, such as its size, and will be used\n * when the frame is reached in the data stream.\n */\nPixelStream.prototype.addFrame = function(frame) {\n  this._frameQueue.push(frame);\n};\n\n// Transform stream implementation\nPixelStream.prototype._transform = function(data, encoding, done) {\n  var self = this;\n    \n  // recursive state machine to consume the given data by\n  // calling the correct sequence of functions on our subclass\n  function write(data) {    \n    switch (self._state) {\n      case START:\n        // compute the byte size of a single frame\n        self._frameSize = self.format.width * self.format.height * COMPONENTS[self.format.colorSpace];\n        self._inputFormat = copy(self.format);\n        \n        self._start(function(err) {\n          if (err) return done(err);\n          \n          // emit format object for streams further down the pipes\n          self.emit('format', self.format);\n          \n          self._state = FRAME_START;\n          write(data);\n        });\n        \n        break;\n        \n      case FRAME_START:\n        var frame = self._frameQueue.shift() || {};\n        \n        // if the frame object has width and height\n        // properties, recompute the frame size.\n        if (frame.width && frame.height)\n          self._frameSize = frame.width * frame.height * COMPONENTS[self._inputFormat.colorSpace];\n        \n        self._startFrame(frame, function(err) {\n          if (err) return done(err);\n        \n          self.emit('frame', frame);\n          self._state = FRAME_DATA;\n          write(data);\n        });\n        \n        break;\n        \n      case FRAME_DATA:        \n        if (data.length === 0)\n          return done();\n          \n        // if the frame size is zero, just call frame end\n        if (self._frameSize === 0) {\n          self._state = FRAME_END;\n          write(EMPTY_BUFFER);\n          break;\n        }\n        \n        var chunk = data.slice(0, self._frameSize - self._consumed);\n        self._writePixels(chunk, function(err) {\n          if (err) return done(err);\n          \n          self._consumed += chunk.length;\n          if (self._consumed === self._frameSize)\n            self._state = FRAME_END;\n            \n          write(data.slice(chunk.length));\n        });\n        \n        break;\n        \n      case FRAME_END:\n        self._endFrame(function(err) {\n          if (err) return done(err);\n          \n          self._consumed = 0;\n          self._state = FRAME_START;\n          if (data.length)\n            write(data);\n          else\n            done();\n        });\n        \n        break;\n    }\n  }\n  \n  write(data);\n};\n\nPixelStream.prototype._flush = function(done) {\n  this._end(done);\n};\n\n/**\n * For optional implementation by subclasses.\n * Called before the start of the first frame.\n * Implementations should the callback when done.\n */\nPixelStream.prototype._start = function(done) {\n  done();\n};\n\n/**\n * For optional implementation by subclasses.\n * Called at the start of each frame, including the\n * frame metadata. Implementations should the callback \n * when done.\n */\nPixelStream.prototype._startFrame = function(frame, done) {\n  done();\n};\n\n/**\n * Required to be implemented by subclasses.\n * Called to write pixel data to the current frame.\n */\nPixelStream.prototype._writePixels = function(data, done) {\n  done(new Error('No _writePixels implementation'));\n};\n\n/**\n * For optional implementation by subclasses.\n * Called after each frame has been written.\n */\nPixelStream.prototype._endFrame = function(done) {\n  done();\n};\n\n/**\n * For optional implementation by subclasses.\n * Called after all frames have been written.\n */\nPixelStream.prototype._end = function(done) {\n  done();\n};\n\nmodule.exports = PixelStream;\n","'use strict'\n\nfunction isPromise (obj) {\n  // via https://unpkg.com/is-promise@2.1.0/index.js\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\n}\n\nfunction registerPromiseWorker (callback) {\n  function postOutgoingMessage (e, messageId, error, result) {\n    function postMessage (msg) {\n      /* istanbul ignore if */\n      if (typeof self.postMessage !== 'function') { // service worker\n        e.ports[0].postMessage(msg)\n      } else { // web worker\n        self.postMessage(msg)\n      }\n    }\n    if (error) {\n      /* istanbul ignore else */\n      if (typeof console !== 'undefined' && 'error' in console) {\n        // This is to make errors easier to debug. I think it's important\n        // enough to just leave here without giving the user an option\n        // to silence it.\n        console.error('Worker caught an error:', error)\n      }\n      postMessage([messageId, {\n        message: error.message\n      }])\n    } else {\n      postMessage([messageId, null, result])\n    }\n  }\n\n  function tryCatchFunc (callback, message) {\n    try {\n      return { res: callback(message) }\n    } catch (e) {\n      return { err: e }\n    }\n  }\n\n  function handleIncomingMessage (e, callback, messageId, message) {\n    var result = tryCatchFunc(callback, message)\n\n    if (result.err) {\n      postOutgoingMessage(e, messageId, result.err)\n    } else if (!isPromise(result.res)) {\n      postOutgoingMessage(e, messageId, null, result.res)\n    } else {\n      result.res.then(function (finalResult) {\n        postOutgoingMessage(e, messageId, null, finalResult)\n      }, function (finalError) {\n        postOutgoingMessage(e, messageId, finalError)\n      })\n    }\n  }\n\n  function onIncomingMessage (e) {\n    var payload = e.data\n    if (!Array.isArray(payload) || payload.length !== 2) {\n      // message doens't match communication format; ignore\n      return\n    }\n    var messageId = payload[0]\n    var message = payload[1]\n\n    if (typeof callback !== 'function') {\n      postOutgoingMessage(e, messageId, new Error(\n        'Please pass a function into register().'))\n    } else {\n      handleIncomingMessage(e, callback, messageId, message)\n    }\n  }\n\n  self.addEventListener('message', onIncomingMessage)\n}\n\nmodule.exports = registerPromiseWorker\n","module.exports = function (obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n    \n    var copy;\n    \n    if (isArray(obj)) {\n        var len = obj.length;\n        copy = Array(len);\n        for (var i = 0; i < len; i++) {\n            copy[i] = obj[i];\n        }\n    }\n    else {\n        var keys = objectKeys(obj);\n        copy = {};\n        \n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            copy[key] = obj[key];\n        }\n    }\n    return copy;\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) {\n        if ({}.hasOwnProperty.call(obj, key)) keys.push(key);\n    }\n    return keys;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return {}.toString.call(xs) === '[object Array]';\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * NeuQuant Neural-Network Quantization Algorithm\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * See \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * See also http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * Copyright (c) 2012 Johan Nordberg (JavaScript port)\n * Copyright (c) 2014 Devon Govett (JavaScript port)\n */\n\nconst prime1 = 499\nconst prime2 = 491\nconst prime3 = 487\nconst prime4 = 503\n\nconst maxprime = Math.max(prime1, prime2, prime3, prime4)\nconst minpicturebytes = (3 * maxprime)\n\nconst defaults = {\n  ncycles: 100,\n  netsize: 256,\n  samplefac: 10\n}\n\nconst assign = function (target) {\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    const nextSource = arguments[i]\n    if (nextSource != null) {\n      for (const nextKey in nextSource) {\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          target[nextKey] = nextSource[nextKey]\n        }\n      }\n    }\n  }\n  return target\n}\n\nexport default class NeuQuant {\n  constructor (pixels, options) {\n    assign(this, defaults, {pixels}, options)\n\n    if (this.netsize < 4 || this.netsize > 256) {\n      throw new Error('Color count must be between 4 and 256')\n    }\n\n    if (this.samplefac < 1 || this.samplefac > 30) {\n      throw new Error('Sampling factor must be between 1 and 30')\n    }\n\n    this.maxnetpos = this.netsize - 1\n\n    this.netbiasshift = 4\n    this.intbiasshift = 16\n    this.intbias = (1 << this.intbiasshift)\n    this.gammashift = 10\n    this.gamma = (1 << this.gammashift)\n    this.betashift = 10\n    this.beta = (this.intbias >> this.betashift)\n    this.betagamma = (this.beta * this.gamma)\n\n    this.initrad = (this.netsize >> 3)\n    this.radiusbiasshift = 6\n    this.radiusbias = (1 << this.radiusbiasshift)\n    this.initradius = (this.initrad * this.radiusbias)\n    this.radiusdec = 30\n\n    this.alphabiasshift = 10\n    this.initalpha = (1 << this.alphabiasshift)\n\n    this.radbiasshift = 8\n    this.radbias = (1 << this.radbiasshift)\n    this.alpharadbshift = (this.alphabiasshift + this.radbiasshift)\n    this.alpharadbias = (1 << this.alpharadbshift)\n\n    this.network = []\n    this.netindex = new Uint32Array(256)\n    this.bias = new Uint32Array(this.netsize)\n    this.freq = new Uint32Array(this.netsize)\n    this.radpower = new Uint32Array(this.netsize >> 3)\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let v = (i << (this.netbiasshift + 8)) / this.netsize\n      this.network[i] = new Float64Array([v, v, v, 0])\n      this.freq[i] = this.intbias / this.netsize\n      this.bias[i] = 0\n    }\n  }\n\n  unbiasnet () {\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      this.network[i][0] >>= this.netbiasshift\n      this.network[i][1] >>= this.netbiasshift\n      this.network[i][2] >>= this.netbiasshift\n      this.network[i][3] = i\n    }\n  }\n\n  altersingle (alpha, i, b, g, r) {\n    this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha\n    this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha\n    this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha\n  }\n\n  alterneigh (radius, i, b, g, r) {\n    const lo = Math.abs(i - radius)\n    const hi = Math.min(i + radius, this.netsize)\n\n    let j = i + 1\n    let k = i - 1\n    let m = 1\n\n    while ((j < hi) || (k > lo)) {\n      const a = this.radpower[m++]\n\n      if (j < hi) {\n        const p = this.network[j++]\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\n      }\n\n      if (k > lo) {\n        const p = this.network[k--]\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\n      }\n    }\n  }\n\n  contest (b, g, r) {\n    let bestd = ~(1 << 31)\n    let bestbiasd = bestd\n    let bestpos = -1\n    let bestbiaspos = bestpos\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let n = this.network[i]\n\n      let dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r)\n      if (dist < bestd) {\n        bestd = dist\n        bestpos = i\n      }\n\n      let biasdist = dist - ((this.bias[i]) >> (this.intbiasshift - this.netbiasshift))\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist\n        bestbiaspos = i\n      }\n\n      let betafreq = (this.freq[i] >> this.betashift)\n      this.freq[i] -= betafreq\n      this.bias[i] += (betafreq << this.gammashift)\n    }\n\n    this.freq[bestpos] += this.beta\n    this.bias[bestpos] -= this.betagamma\n\n    return bestbiaspos\n  }\n\n  inxbuild () {\n    let previouscol = 0\n    let startpos = 0\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let p = this.network[i]\n      let q = null\n      let smallpos = i\n      let smallval = p[1]\n\n      for (let j = i + 1; j < l; j++) {\n        q = this.network[j]\n        if (q[1] < smallval) {\n          smallpos = j\n          smallval = q[1]\n        }\n      }\n      q = this.network[smallpos]\n\n      if (i !== smallpos) {\n        [p[0], q[0]] = [q[0], p[0]];\n        [p[1], q[1]] = [q[1], p[1]];\n        [p[2], q[2]] = [q[2], p[2]];\n        [p[3], q[3]] = [q[3], p[3]]\n      }\n\n      if (smallval !== previouscol) {\n        this.netindex[previouscol] = (startpos + i) >> 1\n        for (let j = previouscol + 1; j < smallval; j++) {\n          this.netindex[j] = i\n        }\n        previouscol = smallval\n        startpos = i\n      }\n    }\n\n    this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1\n    for (let i = previouscol + 1; i < 256; i++) {\n      this.netindex[i] = this.maxnetpos\n    }\n  }\n\n  learn () {\n    const lengthcount = this.pixels.length\n    const alphadec = 30 + ((this.samplefac - 1) / 3)\n    const samplepixels = lengthcount / (3 * this.samplefac)\n\n    let delta = samplepixels / this.ncycles | 0\n    let alpha = this.initalpha\n    let radius = this.initradius\n\n    let rad = radius >> this.radiusbiasshift\n\n    if (rad <= 1) {\n      rad = 0\n    }\n\n    for (let i = 0; i < rad; i++) {\n      this.radpower[i] = alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad))\n    }\n\n    let step\n    if (lengthcount < minpicturebytes) {\n      this.samplefac = 1\n      step = 3\n    } else if ((lengthcount % prime1) !== 0) {\n      step = 3 * prime1\n    } else if ((lengthcount % prime2) !== 0) {\n      step = 3 * prime2\n    } else if ((lengthcount % prime3) !== 0) {\n      step = 3 * prime3\n    } else {\n      step = 3 * prime4\n    }\n\n    let pix = 0\n\n    for (let i = 0; i < samplepixels;) {\n      let b = (this.pixels[pix] & 0xff) << this.netbiasshift\n      let g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift\n      let r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift\n\n      let j = this.contest(b, g, r)\n      this.altersingle(alpha, j, b, g, r)\n      if (rad !== 0) {\n        this.alterneigh(rad, j, b, g, r)\n      }\n\n      pix += step\n      if (pix >= lengthcount) {\n        pix -= lengthcount\n      }\n\n      if (delta === 0) {\n        delta = 1\n      }\n\n      if (++i % delta === 0) {\n        alpha -= alpha / alphadec\n        radius -= radius / this.radiusdec\n        rad = radius >> this.radiusbiasshift\n\n        if (rad <= 1) {\n          rad = 0\n        }\n\n        for (let k = 0; k < rad; k++) {\n          this.radpower[k] = alpha * (((rad * rad - k * k) * this.radbias) / (rad * rad))\n        }\n      }\n    }\n  }\n\n  buildColorMap () {\n    this.learn()\n    this.unbiasnet()\n    this.inxbuild()\n  }\n\n  getColorMap () {\n    const map = new Uint8Array(this.netsize * 3)\n    const index = new Uint8Array(this.netsize)\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      index[this.network[i][3]] = i\n    }\n\n    for (let i = 0, j = 0, k = 0, l = this.netsize; i < l; i++) {\n      k = index[i]\n      map[j++] = this.network[k][0] & 0xff\n      map[j++] = this.network[k][1] & 0xff\n      map[j++] = this.network[k][2] & 0xff\n    }\n\n    return map\n  }\n}\n","import NeuQuant from './neuquant.js'\n\nfunction findClosest (palette, r, g, b) {\n  let minpos = 0\n  let mind = 256 * 256 * 256\n\n  for (let i = 0, l = palette.length; i < l;) {\n    const dr = r - palette[i++]\n    const dg = g - palette[i++]\n    const db = b - palette[i]\n    const d = dr * dr + dg * dg + db * db\n    const pos = i / 3 | 0\n\n    if (d < mind) {\n      mind = d\n      minpos = pos\n    }\n\n    i++\n  }\n\n  return minpos\n}\n\nexport function palette (pixels, options) {\n  const nq = new NeuQuant(pixels, options)\n  nq.buildColorMap()\n  return nq.getColorMap()\n}\n\nexport function indexed (pixels, palette) {\n  const indexed = new Uint8Array(pixels.length / 3)\n  const memo = {}\n\n  for (let i = 0, j = 0, l = pixels.length; i < l;) {\n    const r = pixels[i++]\n    const g = pixels[i++]\n    const b = pixels[i++]\n    const k = r << 16 | g << 8 | b\n\n    if (k in memo) {\n      indexed[j++] = memo[k]\n    } else {\n      indexed[j++] = memo[k] = findClosest(palette, r, g, b)\n    }\n  }\n\n  return indexed\n}\n\nexport function quantize (pixels, options) {\n  const p = palette(pixels, options)\n  const i = indexed(pixels, p)\n\n  return {\n    palette: p,\n    indexed: i\n  }\n}\n","/**\n * CIE XYZ\n *\n * @module  color-space/xyz\n */\nimport rgb from './rgb.js';\n\nvar xyz = {\n\tname: 'xyz',\n\tmin: [0,0,0],\n\tchannel: ['X','Y','Z'],\n\talias: ['XYZ', 'ciexyz', 'cie1931']\n};\n\n\n/**\n * Whitepoint reference values with observer/illuminant\n *\n * http://en.wikipedia.org/wiki/Standard_illuminant\n */\nxyz.whitepoint = {\n\t//1931 2°\n\t2: {\n\t\t//incadescent\n\t\tA:[109.85, 100, 35.585],\n\t\t// B:[],\n\t\tC: [98.074, 100, 118.232],\n\t\tD50: [96.422, 100, 82.521],\n\t\tD55: [95.682, 100, 92.149],\n\t\t//daylight\n\t\tD65: [95.045592705167, 100, 108.9057750759878],\n\t\tD75: [94.972, 100, 122.638],\n\t\t//flourescent\n\t\t// F1: [],\n\t\tF2: [99.187, 100, 67.395],\n\t\t// F3: [],\n\t\t// F4: [],\n\t\t// F5: [],\n\t\t// F6:[],\n\t\tF7: [95.044, 100, 108.755],\n\t\t// F8: [],\n\t\t// F9: [],\n\t\t// F10: [],\n\t\tF11: [100.966, 100, 64.370],\n\t\t// F12: [],\n\t\tE: [100,100,100]\n\t},\n\n\t//1964  10°\n\t10: {\n\t\t//incadescent\n\t\tA:[111.144, 100, 35.200],\n\t\tC: [97.285, 100, 116.145],\n\t\tD50: [96.720, 100, 81.427],\n\t\tD55: [95.799, 100, 90.926],\n\t\t//daylight\n\t\tD65: [94.811, 100, 107.304],\n\t\tD75: [94.416, 100, 120.641],\n\t\t//flourescent\n\t\tF2: [103.280, 100, 69.026],\n\t\tF7: [95.792, 100, 107.687],\n\t\tF11: [103.866, 100, 65.627],\n\t\tE: [100,100,100]\n\t}\n};\n\n\n/**\n * Top values are the whitepoint’s top values, default are D65\n */\nxyz.max = xyz.whitepoint[2].D65;\n\n\n/**\n * Transform xyz to rgb\n *\n * @param {Array} xyz Array of xyz values\n *\n * @return {Array} RGB values\n */\nxyz.rgb = function (_xyz, white) {\n\t//FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\n\twhite = white || xyz.whitepoint[2].E;\n\n\tvar x = _xyz[0] / white[0],\n\t\ty = _xyz[1] / white[1],\n\t\tz = _xyz[2] / white[2],\n\t\tr, g, b;\n\n\t// assume sRGB\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\tr = (x * 3.240969941904521) + (y * -1.537383177570093) + (z * -0.498610760293);\n\tg = (x * -0.96924363628087) + (y * 1.87596750150772) + (z * 0.041555057407175);\n\tb = (x * 0.055630079696993) + (y * -0.20397695888897) + (z * 1.056971514242878);\n\n\tr = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r = (r * 12.92);\n\n\tg = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g = (g * 12.92);\n\n\tb = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b = (b * 12.92);\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n}\n\n\n\n/**\n * RGB to XYZ\n *\n * @param {Array} rgb RGB channels\n *\n * @return {Array} XYZ channels\n */\nrgb.xyz = function(rgb, white) {\n\tvar r = rgb[0] / 255,\n\t\t\tg = rgb[1] / 255,\n\t\t\tb = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.41239079926595) + (g * 0.35758433938387) + (b * 0.18048078840183);\n\tvar y = (r * 0.21263900587151) + (g * 0.71516867876775) + (b * 0.072192315360733);\n\tvar z = (r * 0.019330818715591) + (g * 0.11919477979462) + (b * 0.95053215224966);\n\n\twhite = white || xyz.whitepoint[2].E;\n\n\treturn [x * white[0], y * white[1], z * white[2]];\n};\n\n\n\nexport default xyz;\n","import { palette, indexed } from 'neuquant-js';\nimport rgb from 'color-space/rgb.js';\nimport xyz from 'color-space/xyz.js';\nimport lab from 'color-space/lab.js';\n\n/**\r\n * 返回两个四维坐标间的欧几里得距离\r\n * @param a\r\n * @param b\r\n * @returns\r\n */\nfunction euclidean_distance_squared(a, b) {\n  const r = a[0] - b[0];\n  const g = a[1] - b[1];\n\n  const _b = a[2] - b[2];\n\n  const _a = a[3] - b[3];\n\n  return r ** 2 + g ** 2 + _b ** 2 + _a ** 2;\n}\nfunction euclidean_distance_squared_index(a, a_start, b) {\n  const r = a[a_start++] - b[0];\n  const g = a[a_start++] - b[1];\n\n  const _b = a[a_start++] - b[2];\n\n  const _a = a[a_start++] - b[3];\n\n  return r ** 2 + g ** 2 + _b ** 2 + _a ** 2;\n}\n/**\r\n * 以数组形式返回三个数字中的最大值与最小值\r\n * @param param0 一个包含三个数字的数组\r\n * @returns [max,min]\r\n */\n\nfunction max_min_of_three([a, b, c]) {\n  if (a > b) {\n    if (b > c) {\n      //abc\n      return [a, c];\n    } else {\n      if (a > c) {\n        //acb\n        return [a, b];\n      } else {\n        //cab\n        return [c, b];\n      }\n    }\n  } else {\n    //a<b\n    if (b > c) {\n      if (c > a) {\n        //bca\n        return [b, a];\n      } else {\n        //bac\n        return [b, c];\n      }\n    } else {\n      //cba\n      return [c, a];\n    }\n  }\n}\n\nfunction kmeans(data, k, attempt, thresold = 1) {\n  const cluster_sum\n  /*[r,g,b,a,c]*/\n  = [];\n  let cluster_centers = [];\n  let new_cluster_centers = [];\n  let iteration = 0;\n\n  for (let i = 0; i < k; i++) {\n    const start = Math.floor(Math.random() * data.length);\n    cluster_centers.push(Array.from(data.slice(start, start + 4))); //随机选点\n\n    new_cluster_centers.push(_filled_array(0, 4));\n    cluster_sum.push(_filled_array(0, 5));\n  }\n\n  while (iteration < attempt) {\n    //准备坐标和\n    //计算每个点与中心的距离\n    for (let i = 0; i < data.length;) {\n      let cluster_index = 0;\n\n      let _min_distance = euclidean_distance_squared_index(data, i, cluster_centers[0]);\n\n      for (let j = 1; j < k; j++) {\n        const distance = euclidean_distance_squared_index(data, i, cluster_centers[j]);\n\n        if (distance < _min_distance) {\n          _min_distance = distance;\n          cluster_index = j;\n        }\n      }\n\n      const sum = cluster_sum[cluster_index];\n      sum[0] += data[i++];\n      sum[1] += data[i++];\n      sum[2] += data[i++];\n      sum[3] += data[i++];\n      sum[4]++;\n    }\n\n    let diff = 0; //重新计算中心点\n\n    for (let i = 0; i < k; i++) {\n      const rgbac = cluster_sum[i];\n      const count = rgbac[4];\n\n      if (count == 0) {\n        //空类 重新选中心点\n        const start = Math.floor(Math.random() * data.length);\n        new_cluster_centers[i] = Array.from(data.slice(start, start + 4));\n        diff += thresold;\n      } else {\n        const new_center = new_cluster_centers[i];\n\n        for (let j = 0; j < 4; j++) {\n          new_center[j] = rgbac[j] / count;\n        }\n\n        diff += Math.sqrt(euclidean_distance_squared(cluster_centers[i], new_cluster_centers[i]));\n      }\n    }\n\n    if (diff <= thresold) {\n      return {\n        centroid: new_cluster_centers,\n        iteration,\n        fit: true,\n        label: cluster_sum.map(v => v[4]),\n        size: data.length\n      };\n    }\n\n    const medium = cluster_centers;\n    cluster_centers = new_cluster_centers;\n    new_cluster_centers = medium;\n    iteration++; //清空累加\n\n    for (let i = 0; i < k; i++) {\n      const sum_array = cluster_sum[i];\n      sum_array[0] = 0;\n      sum_array[1] = 0;\n      sum_array[2] = 0;\n      sum_array[3] = 0;\n      sum_array[4] = 0;\n    }\n  }\n\n  return {\n    centroid: cluster_centers,\n    iteration,\n    fit: false,\n    label: cluster_sum.map(v => v[4]),\n    size: data.length\n  };\n}\n\nfunction _filled_array(fillWith, count) {\n  const array = [];\n\n  for (let i = 0; i < count; i++) {\n    array.push(fillWith);\n  }\n\n  return array;\n}\n\nfunction rgba2Rgb(data) {\n  const rgb = new Uint8ClampedArray(data.length / 4 * 3);\n  const len = data.length;\n  let rgb_i = 0;\n\n  for (let i = 0; i < len;) {\n    for (let j = 0; j < 3; j++) {\n      rgb[rgb_i++] = data[i++];\n    }\n\n    i++;\n  }\n\n  return rgb;\n}\n/**\r\n * @param samplefac Sampling factor, which can be changed to increase or decrease quality at the expense of performance. The lower the number, the higher the quality.\r\n * based on 'neuquant-js'\r\n */\n\n\nfunction neuquant(img, k, samplefac = 1) {\n  const img_rgb = rgba2Rgb(img);\n  const palette$1 = palette(img_rgb, {\n    netsize: k,\n    samplefac\n  });\n  const indexed_pixel = indexed(img_rgb, palette$1);\n  const pixel = [];\n  const len = palette$1.length;\n\n  for (let i = 0; i < len;) {\n    pixel.push([palette$1[i++], palette$1[i++], palette$1[i++], 255]);\n  }\n\n  return {\n    centroid: pixel,\n    label: count(k, indexed_pixel)\n  };\n}\n\nfunction count(k, index) {\n  const counts = new Array(k).fill(0);\n\n  for (const i of index) {\n    counts[i]++;\n  }\n\n  return counts;\n}\n\nfunction _prepare2DContext(width, height) {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d'); //contextType 是存在的\n\n  canvas.height = height;\n  canvas.width = width;\n  return ctx;\n}\n/**\r\n * Use OffscreenCanvas\r\n */\n\n\nfunction _prepare2DContextAsync(width, height) {\n  const canvas = new OffscreenCanvas(width, height);\n  const ctx = canvas.getContext('2d');\n  return ctx;\n}\n/**\r\n * a Promise resolved when <img> is loaded\r\n * @param imgElement\r\n * @returns Event, undefined when Image is already loaded\r\n */\n\n\nfunction awaitImage(imgElement) {\n  return new Promise((resolve, reject) => {\n    if (imgElement.complete) {\n      resolve();\n    } else {\n      imgElement.addEventListener('load', e => {\n        resolve(e);\n      });\n      imgElement.addEventListener('error', reason => {\n        reject(reason);\n      });\n    }\n  });\n}\nconst readImage = _readImage.bind(undefined, _prepare2DContext);\n/**\r\n * read image using OffscreenCanvas\r\n */\n\nconst readImageOffscreen = _readImage.bind(undefined, _prepare2DContextAsync);\n\nfunction _readImage(prepareCtx, imgSource) {\n  const {\n    naturalWidth,\n    naturalHeight\n  } = imgSource;\n  const ctx = prepareCtx(naturalWidth, naturalHeight);\n  ctx.drawImage(imgSource, 0, 0, naturalWidth, naturalHeight);\n  return ctx.getImageData(0, 0, naturalWidth, naturalHeight);\n}\n/**\r\n * 降采样后读取图片\r\n * @param imgSource\r\n * @param maxSample\r\n * @returns\r\n */\n\n\nconst readImageDownsampling = _readImageDownsampling.bind(undefined, _prepare2DContext);\nconst readImageDownsamplingOffscreen = _readImageDownsampling.bind(undefined, _prepare2DContextAsync);\n\nfunction _readImageDownsampling(prepareCtx, imgSource, maxSample) {\n  const {\n    naturalWidth: width,\n    naturalHeight: height\n  } = imgSource;\n  const scale = width * height / maxSample;\n\n  if (scale > 1) {\n    const n_width = width / Math.sqrt(scale);\n    const n_height = height / Math.sqrt(scale);\n    const ctx = prepareCtx(n_width, n_height);\n    ctx.drawImage(imgSource, 0, 0, n_width, n_height);\n    return ctx.getImageData(0, 0, n_width, n_height);\n  } else {\n    const ctx = prepareCtx(width, height);\n    ctx.drawImage(imgSource, 0, 0);\n    return ctx.getImageData(0, 0, width, height);\n  }\n}\n\nfunction normalizeRGBA(rgba) {\n  return rgba.map(v => v / 255);\n}\nfunction rgbaToHSLA(rgba) {\n  let h, s; //@ts-ignore\n\n  const [max, min] = max_min_of_three(rgba);\n  const diff = max - min;\n  const light_2x = max + min; //h\n\n  if (diff == 0) {\n    h = 0;\n    s = 0;\n  } else {\n    if (max == rgba[0]) {\n      const temp_h = 60 * (rgba[1] - rgba[2]) / diff;\n\n      if (temp_h < 0) {\n        h = temp_h + 360;\n      } else {\n        h = temp_h;\n      }\n    } else if (max == rgba[1]) {\n      h = 60 * (rgba[2] - rgba[0]) / diff + 120;\n    } else {\n      h = 60 * (rgba[0] - rgba[1]) / diff + 240;\n    }\n\n    if (light_2x == 0) {\n      s = 0;\n    } else if (light_2x <= 1) {\n      s = diff / light_2x;\n    } else {\n      s = diff / (2 - light_2x);\n    }\n  }\n\n  return [h, s, light_2x / 2, rgba[3]];\n}\n/**\r\n * 返回一个排序HSLA颜色的函数\r\n * @param sort\r\n * @returns\r\n */\n\n\nconst getHSLAComparer = (sort = [0, 1, 2, 3]) => (a, b) => {\n  let result;\n\n  for (const s of sort) {\n    result = a[s] - b[s];\n\n    if (result != 0) {\n      return result;\n    }\n  } //其实是赋了值的，但是ts没猜出来\n  //@ts-ignore\n\n\n  return result;\n};\n/**\r\n * 将颜色转换成对应的CSS文本\r\n * @param param0 像素\r\n * @returns hsla(${h}deg,${s}%,${l}%,${a})\r\n */\n\nconst hslaCSSText = ([h, s, l, a]) => `hsla(${h}deg,${s * 100}%,${l * 100}%,${a})`;\n/**\r\n * 将颜色转换成对应的CSS文本\r\n * @param pixel 像素\r\n * @returns rgba(r,g,b,a)\r\n */\n\nconst rgbaCSSText = pixel => `rgba(${pixel.map(v => Math.floor(v)).join(',')})`;\n\nfunction convertToLab(source) {\n  //CIE Lab包含浮点表示，不能使用Uint8ClampedArray\n  const array = [];\n\n  for (let i = 0; i < source.length; i += 4) {\n    const pixel = source.slice(i, i + 4);\n    const alpha = pixel[3];\n    const pixel_rgb = pixel.slice(0, 3);\n    const pixel_xyz = rgb.xyz(pixel_rgb);\n    const pixel_lab = xyz.lab(pixel_xyz);\n    array.push(...pixel_lab, alpha);\n  }\n\n  return array;\n}\nfunction labaToRGBA(laba) {\n  const pixel_lab = laba.slice(0, 3);\n  const alpha = laba[3];\n  const pixel_xyz = lab.xyz(pixel_lab);\n  const pixel_rgb = xyz.rgb(pixel_xyz);\n  pixel_rgb.push(alpha);\n  return pixel_rgb;\n}\n\nexport { awaitImage, convertToLab, getHSLAComparer, hslaCSSText, kmeans, labaToRGBA, neuquant, normalizeRGBA, readImage, readImageDownsampling, readImageDownsamplingOffscreen, readImageOffscreen, rgbaCSSText, rgbaToHSLA };\n//# sourceMappingURL=index.modern.js.map\n","/**\n * CIE LAB space model\n *\n * @module color-space/lab\n */\n\nimport xyz from './xyz.js';\n\nexport default {\n\tname: 'lab',\n\tmin: [0,-100,-100],\n\tmax: [100,100,100],\n\tchannel: ['lightness', 'a', 'b'],\n\talias: ['LAB', 'cielab'],\n\n\txyz: function(lab) {\n\t\tvar l = lab[0],\n\t\t\t\ta = lab[1],\n\t\t\t\tb = lab[2],\n\t\t\t\tx, y, z, y2;\n\n\t\tif (l <= 8) {\n\t\t\ty = (l * 100) / 903.3;\n\t\t\ty2 = (7.787 * (y / 100)) + (16 / 116);\n\t\t} else {\n\t\t\ty = 100 * Math.pow((l + 16) / 116, 3);\n\t\t\ty2 = Math.pow(y / 100, 1/3);\n\t\t}\n\n\t\tx = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);\n\n\t\tz = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);\n\n\t\treturn [x, y, z];\n\t}\n};\n\n\n//extend xyz\nxyz.lab = function(xyz){\n\tvar x = xyz[0],\n\t\t\ty = xyz[1],\n\t\t\tz = xyz[2],\n\t\t\tl, a, b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n","import { neuquant } from \"@kotorik/palette\";\nimport registerPromiseWorker from 'promise-worker/register';\nregisterPromiseWorker((data) => {\n    const { img, k } = data;\n    const result = neuquant(img.data, k);\n    return result;\n});\n"],"names":["Transform","util","copy","COMPONENTS","EMPTY_BUFFER","Buffer","PixelStream","width","height","opts","call","this","format","colorSpace","key","_consumed","_state","_frameQueue","self","once","src","on","addFrame","bind","inherits","prototype","frame","push","_transform","data","encoding","done","write","_frameSize","_inputFormat","_start","err","emit","shift","_startFrame","length","chunk","slice","_writePixels","_endFrame","_flush","_end","Error","module","exports","callback","postOutgoingMessage","e","messageId","error","result","postMessage","msg","ports","console","message","addEventListener","payload","Array","isArray","obj","res","tryCatchFunc","then","finalResult","finalError","handleIncomingMessage","len","i","keys","objectKeys","l","Object","hasOwnProperty","xs","toString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","prop","minpicturebytes","Math","max","defaults","ncycles","netsize","samplefac","NeuQuant","constructor","pixels","options","target","arguments","nextSource","nextKey","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","network","netindex","Uint32Array","bias","freq","radpower","v","Float64Array","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","abs","hi","min","j","k","m","p","contest","bestd","bestbiasd","bestpos","bestbiaspos","dist","biasdist","betafreq","inxbuild","previouscol","startpos","q","smallpos","smallval","learn","lengthcount","alphadec","samplepixels","step","delta","rad","pix","buildColorMap","getColorMap","map","Uint8Array","index","findClosest","palette","minpos","mind","dr","dg","db","nq","indexed","memo","name","channel","alias","A","C","D50","D55","D65","D75","F2","F7","F11","E","whitepoint","rgb","_xyz","white","x","y","z","pow","neuquant","img","img_rgb","Uint8ClampedArray","rgb_i","rgba2Rgb","palette$1","indexed_pixel","pixel","centroid","label","count","counts","fill","_prepare2DContext","canvas","document","createElement","ctx","getContext","_prepare2DContextAsync","OffscreenCanvas","lab","xyz","_readImage","prepareCtx","imgSource","naturalWidth","naturalHeight","drawImage","getImageData","_readImageDownsampling","maxSample","scale","n_width","sqrt","n_height","registerPromiseWorker"],"sourceRoot":""}